{"ast":null,"code":"var _jsxFileName = \"D:\\\\MCA\\\\TimePass-Games-LogBook\\\\frontend\\\\src\\\\components\\\\GameForm.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from '../api/axios';\nimport { TextField, Button, Box, Typography, Card, CardContent } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameForm = ({\n  fetchGames,\n  selectedGame,\n  setSelectedGame\n}) => {\n  _s();\n  // State to hold form data, initialized with empty values\n  const [form, setForm] = useState({\n    name: '',\n    url: '',\n    author: '',\n    publishedDate: ''\n  });\n\n  // Effect hook to pre-fill the form if a game is selected for editing\n  useEffect(() => {\n    if (selectedGame) setForm(selectedGame); // Pre-fill form fields with the selected game data\n  }, [selectedGame]);\n\n  // Handle input changes and update form state\n  const handleChange = e => {\n    setForm({\n      ...form,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // Handle form submission for both creating and updating games\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // If a game is selected, we update it, otherwise we create a new game\n    if (selectedGame) {\n      await axios.put(`/games/${selectedGame._id}`, form); // Update existing game\n    } else {\n      await axios.post('/games', form); // Create new game\n    }\n\n    // Reset the form after submission\n    setForm({\n      name: '',\n      url: '',\n      author: '',\n      publishedDate: ''\n    });\n    setSelectedGame(null); // Deselect the selected game\n    fetchGames(); // Refresh the games list\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      maxWidth: 400,\n      margin: 'auto',\n      padding: 2,\n      borderRadius: 2,\n      boxShadow: 3\n    },\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        sx: {\n          textAlign: 'center'\n        },\n        children: selectedGame ? 'Update Game' : 'Add New Game'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleSubmit,\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Game Name\",\n          name: \"name\",\n          value: form.name,\n          onChange: handleChange,\n          fullWidth: true,\n          required: true,\n          variant: \"outlined\",\n          sx: {\n            fontSize: '16px'\n          } // Ensure consistent font size\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Game URL\",\n          name: \"url\",\n          value: form.url,\n          onChange: handleChange,\n          fullWidth: true,\n          required: true,\n          variant: \"outlined\",\n          sx: {\n            fontSize: '16px'\n          } // Ensure consistent font size\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Author\",\n          name: \"author\",\n          value: form.author,\n          onChange: handleChange,\n          fullWidth: true,\n          required: true,\n          variant: \"outlined\",\n          sx: {\n            fontSize: '16px'\n          } // Ensure consistent font size\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Published Date\",\n          type: \"date\",\n          name: \"publishedDate\",\n          value: form.publishedDate,\n          onChange: handleChange,\n          fullWidth: true,\n          required: true,\n          variant: \"outlined\",\n          InputLabelProps: {\n            shrink: true // Ensure the label is always visible when a date is selected\n          },\n          sx: {\n            fontSize: '16px'\n          } // Ensure consistent font size\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          type: \"submit\",\n          fullWidth: true,\n          sx: {\n            fontSize: '16px',\n            // Ensure consistent font size\n            padding: '12px',\n            // Consistent button padding\n            height: '48px' // Consistent button height\n          },\n          children: [selectedGame ? 'Update' : 'Add', \" Game\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(GameForm, \"vs/UovSEFA8EBDB3pCXhnO2evaM=\");\n_c = GameForm;\nexport default GameForm;\nvar _c;\n$RefreshReg$(_c, \"GameForm\");","map":{"version":3,"names":["useState","useEffect","axios","TextField","Button","Box","Typography","Card","CardContent","jsxDEV","_jsxDEV","GameForm","fetchGames","selectedGame","setSelectedGame","_s","form","setForm","name","url","author","publishedDate","handleChange","e","target","value","handleSubmit","preventDefault","put","_id","post","sx","maxWidth","margin","padding","borderRadius","boxShadow","children","variant","gutterBottom","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","component","onSubmit","display","flexDirection","gap","label","onChange","fullWidth","required","fontSize","type","InputLabelProps","shrink","color","height","_c","$RefreshReg$"],"sources":["D:/MCA/TimePass-Games-LogBook/frontend/src/components/GameForm.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from '../api/axios';\r\nimport { TextField, Button, Box, Typography, Card, CardContent } from '@mui/material';\r\n\r\nconst GameForm = ({ fetchGames, selectedGame, setSelectedGame }) => {\r\n  // State to hold form data, initialized with empty values\r\n  const [form, setForm] = useState({\r\n    name: '',\r\n    url: '',\r\n    author: '',\r\n    publishedDate: '',\r\n  });\r\n\r\n  // Effect hook to pre-fill the form if a game is selected for editing\r\n  useEffect(() => {\r\n    if (selectedGame) setForm(selectedGame); // Pre-fill form fields with the selected game data\r\n  }, [selectedGame]);\r\n\r\n  // Handle input changes and update form state\r\n  const handleChange = (e) => {\r\n    setForm({ ...form, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // Handle form submission for both creating and updating games\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // If a game is selected, we update it, otherwise we create a new game\r\n    if (selectedGame) {\r\n      await axios.put(`/games/${selectedGame._id}`, form); // Update existing game\r\n    } else {\r\n      await axios.post('/games', form); // Create new game\r\n    }\r\n\r\n    // Reset the form after submission\r\n    setForm({ name: '', url: '', author: '', publishedDate: '' });\r\n    setSelectedGame(null); // Deselect the selected game\r\n    fetchGames(); // Refresh the games list\r\n  };\r\n\r\n  return (\r\n    <Card sx={{ maxWidth: 400, margin: 'auto', padding: 2, borderRadius: 2, boxShadow: 3 }}>\r\n      <CardContent>\r\n        <Typography variant=\"h6\" gutterBottom sx={{ textAlign: 'center' }}>\r\n          {selectedGame ? 'Update Game' : 'Add New Game'}\r\n        </Typography>\r\n\r\n        <Box component=\"form\" onSubmit={handleSubmit} sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n          <TextField\r\n            label=\"Game Name\"\r\n            name=\"name\"\r\n            value={form.name}\r\n            onChange={handleChange}\r\n            fullWidth\r\n            required\r\n            variant=\"outlined\"\r\n            sx={{ fontSize: '16px' }} // Ensure consistent font size\r\n          />\r\n\r\n          <TextField\r\n            label=\"Game URL\"\r\n            name=\"url\"\r\n            value={form.url}\r\n            onChange={handleChange}\r\n            fullWidth\r\n            required\r\n            variant=\"outlined\"\r\n            sx={{ fontSize: '16px' }} // Ensure consistent font size\r\n          />\r\n\r\n          <TextField\r\n            label=\"Author\"\r\n            name=\"author\"\r\n            value={form.author}\r\n            onChange={handleChange}\r\n            fullWidth\r\n            required\r\n            variant=\"outlined\"\r\n            sx={{ fontSize: '16px' }} // Ensure consistent font size\r\n          />\r\n\r\n          <TextField\r\n            label=\"Published Date\"\r\n            type=\"date\"\r\n            name=\"publishedDate\"\r\n            value={form.publishedDate}\r\n            onChange={handleChange}\r\n            fullWidth\r\n            required\r\n            variant=\"outlined\"\r\n            InputLabelProps={{\r\n              shrink: true, // Ensure the label is always visible when a date is selected\r\n            }}\r\n            sx={{ fontSize: '16px' }} // Ensure consistent font size\r\n          />\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            fullWidth\r\n            sx={{\r\n              fontSize: '16px', // Ensure consistent font size\r\n              padding: '12px', // Consistent button padding\r\n              height: '48px', // Consistent button height\r\n            }}\r\n          >\r\n            {selectedGame ? 'Update' : 'Add'} Game\r\n          </Button>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default GameForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}